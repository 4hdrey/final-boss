/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface UserNotesInterface extends utils.Interface {
  functions: {
    "allowance()": FunctionFragment;
    "getData()": FunctionFragment;
    "owner()": FunctionFragment;
    "parentContract()": FunctionFragment;
    "pushData(string)": FunctionFragment;
    "setAllowance()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "getData"
      | "owner"
      | "parentContract"
      | "pushData"
      | "setAllowance"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "allowance", values?: undefined): string;
  encodeFunctionData(functionFragment: "getData", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parentContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAllowance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pushData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowance",
    data: BytesLike
  ): Result;

  events: {
    "Pushed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Pushed"): EventFragment;
}

export interface PushedEventObject {
  user: string;
}
export type PushedEvent = TypedEvent<[string], PushedEventObject>;

export type PushedEventFilter = TypedEventFilter<PushedEvent>;

export interface UserNotes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserNotesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(overrides?: CallOverrides): Promise<[boolean]>;

    getData(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parentContract(overrides?: CallOverrides): Promise<[string]>;

    pushData(
      _newData: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAllowance(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(overrides?: CallOverrides): Promise<boolean>;

  getData(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  parentContract(overrides?: CallOverrides): Promise<string>;

  pushData(
    _newData: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAllowance(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(overrides?: CallOverrides): Promise<boolean>;

    getData(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    parentContract(overrides?: CallOverrides): Promise<string>;

    pushData(
      _newData: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAllowance(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Pushed(address)"(user?: PromiseOrValue<string> | null): PushedEventFilter;
    Pushed(user?: PromiseOrValue<string> | null): PushedEventFilter;
  };

  estimateGas: {
    allowance(overrides?: CallOverrides): Promise<BigNumber>;

    getData(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parentContract(overrides?: CallOverrides): Promise<BigNumber>;

    pushData(
      _newData: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAllowance(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parentContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushData(
      _newData: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAllowance(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
